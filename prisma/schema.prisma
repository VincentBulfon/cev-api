generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Users {
  id              Int        @id @default(autoincrement())
  email           String     @unique
  name            String
  password        String
  role            RoleEnum   @default(USER)
  deleted_at      DateTime?
  first_name      String
  phone_number    String
  secondary_email String?
  verfifed_at     DateTime?
  created_at      DateTime   @default(now())
  children        Children[]
  orders          Orders[]
}

model Children {
  id         Int       @id @default(autoincrement())
  name       String
  birth_date DateTime  @db.Date
  first_name String
  tutor_id   Int
  tutor      Users     @relation(fields: [tutor_id], references: [id])
  courses    Courses[]
}

model Courses {
  id            Int             @id @default(autoincrement())
  places        Int
  end_time      DateTime        @db.Time(6)
  start_time    DateTime        @db.Time(6)
  day_of_week   Int             @db.SmallInt
  cancellations Cancellations[]
  children      Children[]
}

model Cancellations {
  id         Int       @id @default(autoincrement())
  date       DateTime
  course_id  Int
  created_at DateTime  @default(now())
  deleted_at DateTime?
  course     Courses   @relation(fields: [course_id], references: [id])
}

model Options {
  id         Int           @id @default(autoincrement())
  name       OptionEnum
  created_at DateTime      @default(now())
  orders     Options_set[]
  Prices     Prices[]
}

model Prices {
  id          Int           @id @default(autoincrement())
  price       Int
  created_at  DateTime      @default(now())
  option_id   Int
  option      Options       @relation(fields: [option_id], references: [id])
  options_set Options_set[]
}

model Orders {
  id           Int           @id @default(autoincrement())
  cancelled_at DateTime?
  created_at   DateTime      @default(now())
  users_id     Int
  users        Users         @relation(fields: [users_id], references: [id])
  options_set  Options_set[]
}

model Options_set {
  id           Int        @id @default(autoincrement())
  status       StatusEnum @default(UNPAID)
  paid_at      DateTime?
  cancelled_at DateTime?
  option_id    Int
  order_id     Int
  price_id     Int
  option       Options    @relation(fields: [option_id], references: [id])
  order        Orders     @relation(fields: [order_id], references: [id])
  price        Prices     @relation(fields: [price_id], references: [id])
}

enum RoleEnum {
  ADMIN
  MONITOR
  USER
}

enum OptionEnum {
  INSSURANCE
  MEMBERSH1PFEE1
  MEMBERSHIPFEE2
}

enum StatusEnum {
  PAID
  UNPAID
  NOTAPPLICABLE
  NOTYETPAYABLE
}
