### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  userId: String!
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Cancellation {
  created_at: Date!
  date: Date!
  deleted_at: Date
  id: Int!
}

input CancellationsCreateInput {
  course: CoursesCreateNestedOneWithoutCancellationsInput!
  created_at: DateTime
  date: DateTime!
  deleted_at: DateTime
}

input CancellationsCreateManyCourseInput {
  created_at: DateTime
  date: DateTime!
  deleted_at: DateTime
  id: Int
}

input CancellationsCreateManyCourseInputEnvelope {
  data: [CancellationsCreateManyCourseInput!]
  skipDuplicates: Boolean
}

input CancellationsCreateNestedManyWithoutCourseInput {
  connect: [CancellationsWhereUniqueInput!]
  connectOrCreate: [CancellationsCreateOrConnectWithoutCourseInput!]
  create: [CancellationsCreateWithoutCourseInput!]
  createMany: CancellationsCreateManyCourseInputEnvelope
}

input CancellationsCreateOrConnectWithoutCourseInput {
  create: CancellationsCreateWithoutCourseInput!
  where: CancellationsWhereUniqueInput!
}

input CancellationsCreateWithoutCourseInput {
  created_at: DateTime
  date: DateTime!
  deleted_at: DateTime
}

input CancellationsListRelationFilter {
  every: CancellationsWhereInput
  none: CancellationsWhereInput
  some: CancellationsWhereInput
}

input CancellationsOrderByInput {
  course_id: SortOrder
  created_at: SortOrder
  date: SortOrder
  deleted_at: SortOrder
  id: SortOrder
}

input CancellationsScalarWhereInput {
  AND: [CancellationsScalarWhereInput!]
  NOT: [CancellationsScalarWhereInput!]
  OR: [CancellationsScalarWhereInput!]
  course_id: IntFilter
  created_at: DateTimeFilter
  date: DateTimeFilter
  deleted_at: DateTimeNullableFilter
  id: IntFilter
}

input CancellationsUpdateInput {
  course: CoursesUpdateOneRequiredWithoutCancellationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  deleted_at: NullableDateTimeFieldUpdateOperationsInput
}

input CancellationsUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  deleted_at: NullableDateTimeFieldUpdateOperationsInput
}

input CancellationsUpdateManyWithWhereWithoutCourseInput {
  data: CancellationsUpdateManyMutationInput!
  where: CancellationsScalarWhereInput!
}

input CancellationsUpdateManyWithoutCourseInput {
  connect: [CancellationsWhereUniqueInput!]
  connectOrCreate: [CancellationsCreateOrConnectWithoutCourseInput!]
  create: [CancellationsCreateWithoutCourseInput!]
  createMany: CancellationsCreateManyCourseInputEnvelope
  delete: [CancellationsWhereUniqueInput!]
  deleteMany: [CancellationsScalarWhereInput!]
  disconnect: [CancellationsWhereUniqueInput!]
  set: [CancellationsWhereUniqueInput!]
  update: [CancellationsUpdateWithWhereUniqueWithoutCourseInput!]
  updateMany: [CancellationsUpdateManyWithWhereWithoutCourseInput!]
  upsert: [CancellationsUpsertWithWhereUniqueWithoutCourseInput!]
}

input CancellationsUpdateWithWhereUniqueWithoutCourseInput {
  data: CancellationsUpdateWithoutCourseInput!
  where: CancellationsWhereUniqueInput!
}

input CancellationsUpdateWithoutCourseInput {
  created_at: DateTimeFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  deleted_at: NullableDateTimeFieldUpdateOperationsInput
}

input CancellationsUpsertWithWhereUniqueWithoutCourseInput {
  create: CancellationsCreateWithoutCourseInput!
  update: CancellationsUpdateWithoutCourseInput!
  where: CancellationsWhereUniqueInput!
}

input CancellationsWhereInput {
  AND: [CancellationsWhereInput!]
  NOT: [CancellationsWhereInput!]
  OR: [CancellationsWhereInput!]
  course: CoursesWhereInput
  course_id: IntFilter
  created_at: DateTimeFilter
  date: DateTimeFilter
  deleted_at: DateTimeNullableFilter
  id: IntFilter
}

input CancellationsWhereUniqueInput {
  id: Int
}

type Child {
  birth_date: Date!
  courses: [Course]
  first_name: String!
  id: Int!
  name: String!
  orders: [Order]
  token: Token
  tutor: User
  tutor_id: String!
}

input ChildrenCreateInput {
  Orders: OrdersCreateNestedManyWithoutChildInput
  birth_date: DateTime!
  courses: CoursesCreateNestedManyWithoutChildrenInput
  first_name: String!
  name: String!
  tutor: UsersCreateNestedOneWithoutChildrenInput!
}

input ChildrenCreateNestedManyWithoutCoursesInput {
  connect: [ChildrenWhereUniqueInput!]
  connectOrCreate: [ChildrenCreateOrConnectWithoutCoursesInput!]
  create: [ChildrenCreateWithoutCoursesInput!]
}

input ChildrenCreateNestedOneWithoutOrdersInput {
  connect: ChildrenWhereUniqueInput
  connectOrCreate: ChildrenCreateOrConnectWithoutOrdersInput
  create: ChildrenCreateWithoutOrdersInput
}

input ChildrenCreateOrConnectWithoutCoursesInput {
  create: ChildrenCreateWithoutCoursesInput!
  where: ChildrenWhereUniqueInput!
}

input ChildrenCreateOrConnectWithoutOrdersInput {
  create: ChildrenCreateWithoutOrdersInput!
  where: ChildrenWhereUniqueInput!
}

input ChildrenCreateWithoutCoursesInput {
  Orders: OrdersCreateNestedManyWithoutChildInput
  birth_date: DateTime!
  first_name: String!
  name: String!
  tutor: UsersCreateNestedOneWithoutChildrenInput!
}

input ChildrenCreateWithoutOrdersInput {
  birth_date: DateTime!
  courses: CoursesCreateNestedManyWithoutChildrenInput
  first_name: String!
  name: String!
  tutor: UsersCreateNestedOneWithoutChildrenInput!
}

input ChildrenListRelationFilter {
  every: ChildrenWhereInput
  none: ChildrenWhereInput
  some: ChildrenWhereInput
}

input ChildrenScalarWhereInput {
  AND: [ChildrenScalarWhereInput!]
  NOT: [ChildrenScalarWhereInput!]
  OR: [ChildrenScalarWhereInput!]
  birth_date: DateTimeFilter
  first_name: StringFilter
  id: IntFilter
  name: StringFilter
  tutor_id: StringFilter
}

input ChildrenUpdateInput {
  Orders: OrdersUpdateManyWithoutChildInput
  birth_date: DateTimeFieldUpdateOperationsInput
  courses: CoursesUpdateManyWithoutChildrenInput
  first_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  tutor: UsersUpdateOneRequiredWithoutChildrenInput
}

input ChildrenUpdateManyMutationInput {
  birth_date: DateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input ChildrenUpdateManyWithWhereWithoutCoursesInput {
  data: ChildrenUpdateManyMutationInput!
  where: ChildrenScalarWhereInput!
}

input ChildrenUpdateManyWithoutCoursesInput {
  connect: [ChildrenWhereUniqueInput!]
  connectOrCreate: [ChildrenCreateOrConnectWithoutCoursesInput!]
  create: [ChildrenCreateWithoutCoursesInput!]
  delete: [ChildrenWhereUniqueInput!]
  deleteMany: [ChildrenScalarWhereInput!]
  disconnect: [ChildrenWhereUniqueInput!]
  set: [ChildrenWhereUniqueInput!]
  update: [ChildrenUpdateWithWhereUniqueWithoutCoursesInput!]
  updateMany: [ChildrenUpdateManyWithWhereWithoutCoursesInput!]
  upsert: [ChildrenUpsertWithWhereUniqueWithoutCoursesInput!]
}

input ChildrenUpdateOneRequiredWithoutOrdersInput {
  connect: ChildrenWhereUniqueInput
  connectOrCreate: ChildrenCreateOrConnectWithoutOrdersInput
  create: ChildrenCreateWithoutOrdersInput
  update: ChildrenUpdateWithoutOrdersInput
  upsert: ChildrenUpsertWithoutOrdersInput
}

input ChildrenUpdateWithWhereUniqueWithoutCoursesInput {
  data: ChildrenUpdateWithoutCoursesInput!
  where: ChildrenWhereUniqueInput!
}

input ChildrenUpdateWithoutCoursesInput {
  Orders: OrdersUpdateManyWithoutChildInput
  birth_date: DateTimeFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  tutor: UsersUpdateOneRequiredWithoutChildrenInput
}

input ChildrenUpdateWithoutOrdersInput {
  birth_date: DateTimeFieldUpdateOperationsInput
  courses: CoursesUpdateManyWithoutChildrenInput
  first_name: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  tutor: UsersUpdateOneRequiredWithoutChildrenInput
}

input ChildrenUpsertWithWhereUniqueWithoutCoursesInput {
  create: ChildrenCreateWithoutCoursesInput!
  update: ChildrenUpdateWithoutCoursesInput!
  where: ChildrenWhereUniqueInput!
}

input ChildrenUpsertWithoutOrdersInput {
  create: ChildrenCreateWithoutOrdersInput!
  update: ChildrenUpdateWithoutOrdersInput!
}

input ChildrenWhereInput {
  AND: [ChildrenWhereInput!]
  NOT: [ChildrenWhereInput!]
  OR: [ChildrenWhereInput!]
  Orders: OrdersListRelationFilter
  birth_date: DateTimeFilter
  courses: CoursesListRelationFilter
  first_name: StringFilter
  id: IntFilter
  name: StringFilter
  tutor: UsersWhereInput
  tutor_id: StringFilter
}

input ChildrenWhereUniqueInput {
  id: Int
}

type Course {
  cancellations(firstDate: DateTime, secondDate: DateTime): [Cancellation]
  children: [Child]
  day_of_week: Int!
  end_time: Date!
  id: Int!
  occupation: Int!
  places: Int!
  start_time: Date!
}

input CoursesCreateInput {
  cancellations: CancellationsCreateNestedManyWithoutCourseInput
  children: ChildrenCreateNestedManyWithoutCoursesInput
  day_of_week: Int!
  end_time: DateTime!
  places: Int!
  start_time: DateTime!
}

input CoursesCreateNestedManyWithoutChildrenInput {
  connect: [CoursesWhereUniqueInput!]
  connectOrCreate: [CoursesCreateOrConnectWithoutChildrenInput!]
  create: [CoursesCreateWithoutChildrenInput!]
}

input CoursesCreateNestedOneWithoutCancellationsInput {
  connect: CoursesWhereUniqueInput
  connectOrCreate: CoursesCreateOrConnectWithoutCancellationsInput
  create: CoursesCreateWithoutCancellationsInput
}

input CoursesCreateOrConnectWithoutCancellationsInput {
  create: CoursesCreateWithoutCancellationsInput!
  where: CoursesWhereUniqueInput!
}

input CoursesCreateOrConnectWithoutChildrenInput {
  create: CoursesCreateWithoutChildrenInput!
  where: CoursesWhereUniqueInput!
}

input CoursesCreateWithoutCancellationsInput {
  children: ChildrenCreateNestedManyWithoutCoursesInput
  day_of_week: Int!
  end_time: DateTime!
  places: Int!
  start_time: DateTime!
}

input CoursesCreateWithoutChildrenInput {
  cancellations: CancellationsCreateNestedManyWithoutCourseInput
  day_of_week: Int!
  end_time: DateTime!
  places: Int!
  start_time: DateTime!
}

input CoursesListRelationFilter {
  every: CoursesWhereInput
  none: CoursesWhereInput
  some: CoursesWhereInput
}

input CoursesOrderByInput {
  day_of_week: SortOrder
  end_time: SortOrder
  id: SortOrder
  places: SortOrder
  start_time: SortOrder
}

input CoursesScalarWhereInput {
  AND: [CoursesScalarWhereInput!]
  NOT: [CoursesScalarWhereInput!]
  OR: [CoursesScalarWhereInput!]
  day_of_week: IntFilter
  end_time: DateTimeFilter
  id: IntFilter
  places: IntFilter
  start_time: DateTimeFilter
}

input CoursesUpdateInput {
  cancellations: CancellationsUpdateManyWithoutCourseInput
  children: ChildrenUpdateManyWithoutCoursesInput
  day_of_week: IntFieldUpdateOperationsInput
  end_time: DateTimeFieldUpdateOperationsInput
  places: IntFieldUpdateOperationsInput
  start_time: DateTimeFieldUpdateOperationsInput
}

input CoursesUpdateManyMutationInput {
  day_of_week: IntFieldUpdateOperationsInput
  end_time: DateTimeFieldUpdateOperationsInput
  places: IntFieldUpdateOperationsInput
  start_time: DateTimeFieldUpdateOperationsInput
}

input CoursesUpdateManyWithWhereWithoutChildrenInput {
  data: CoursesUpdateManyMutationInput!
  where: CoursesScalarWhereInput!
}

input CoursesUpdateManyWithoutChildrenInput {
  connect: [CoursesWhereUniqueInput!]
  connectOrCreate: [CoursesCreateOrConnectWithoutChildrenInput!]
  create: [CoursesCreateWithoutChildrenInput!]
  delete: [CoursesWhereUniqueInput!]
  deleteMany: [CoursesScalarWhereInput!]
  disconnect: [CoursesWhereUniqueInput!]
  set: [CoursesWhereUniqueInput!]
  update: [CoursesUpdateWithWhereUniqueWithoutChildrenInput!]
  updateMany: [CoursesUpdateManyWithWhereWithoutChildrenInput!]
  upsert: [CoursesUpsertWithWhereUniqueWithoutChildrenInput!]
}

input CoursesUpdateOneRequiredWithoutCancellationsInput {
  connect: CoursesWhereUniqueInput
  connectOrCreate: CoursesCreateOrConnectWithoutCancellationsInput
  create: CoursesCreateWithoutCancellationsInput
  update: CoursesUpdateWithoutCancellationsInput
  upsert: CoursesUpsertWithoutCancellationsInput
}

input CoursesUpdateWithWhereUniqueWithoutChildrenInput {
  data: CoursesUpdateWithoutChildrenInput!
  where: CoursesWhereUniqueInput!
}

input CoursesUpdateWithoutCancellationsInput {
  children: ChildrenUpdateManyWithoutCoursesInput
  day_of_week: IntFieldUpdateOperationsInput
  end_time: DateTimeFieldUpdateOperationsInput
  places: IntFieldUpdateOperationsInput
  start_time: DateTimeFieldUpdateOperationsInput
}

input CoursesUpdateWithoutChildrenInput {
  cancellations: CancellationsUpdateManyWithoutCourseInput
  day_of_week: IntFieldUpdateOperationsInput
  end_time: DateTimeFieldUpdateOperationsInput
  places: IntFieldUpdateOperationsInput
  start_time: DateTimeFieldUpdateOperationsInput
}

input CoursesUpsertWithWhereUniqueWithoutChildrenInput {
  create: CoursesCreateWithoutChildrenInput!
  update: CoursesUpdateWithoutChildrenInput!
  where: CoursesWhereUniqueInput!
}

input CoursesUpsertWithoutCancellationsInput {
  create: CoursesCreateWithoutCancellationsInput!
  update: CoursesUpdateWithoutCancellationsInput!
}

input CoursesWhereInput {
  AND: [CoursesWhereInput!]
  NOT: [CoursesWhereInput!]
  OR: [CoursesWhereInput!]
  cancellations: CancellationsListRelationFilter
  children: ChildrenListRelationFilter
  day_of_week: IntFilter
  end_time: DateTimeFilter
  id: IntFilter
  places: IntFilter
  start_time: DateTimeFilter
}

input CoursesWhereUniqueInput {
  id: Int
}

"""Date custom scalar type"""
scalar Date

scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumNameEnumFieldUpdateOperationsInput {
  set: NameEnum
}

input EnumNameEnumFilter {
  equals: NameEnum
  in: [NameEnum!]
  not: NestedEnumNameEnumFilter
  notIn: [NameEnum!]
}

input EnumRoleEnumFieldUpdateOperationsInput {
  set: RoleEnum
}

input EnumRoleEnumFilter {
  equals: RoleEnum
  in: [RoleEnum!]
  not: NestedEnumRoleEnumFilter
  notIn: [RoleEnum!]
}

input EnumStatusEnumFieldUpdateOperationsInput {
  set: StatusEnum
}

input EnumStatusEnumFilter {
  equals: StatusEnum
  in: [StatusEnum!]
  not: NestedEnumStatusEnumFilter
  notIn: [StatusEnum!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type MessagePayload {
  message: String!
}

type Mutation {
  createChildren(childrenList: [ChildrenCreateInput]!): [Child]

  """create one cancellation"""
  createOneCancellations(data: CancellationsCreateInput!): Cancellation!

  """create one child"""
  createOneChildren(data: ChildrenCreateInput!): Child!

  """create on course"""
  createOneCourses(data: CoursesCreateInput!): Course!

  """create one option"""
  createOneOptions(data: OptionsCreateInput!): Option!

  """create one option set"""
  createOneOptions_set(data: Options_setCreateInput!): OptionSet!

  """craete on order"""
  createOneOrders(data: OrdersCreateInput!): Order!

  """create one price"""
  createOnePrices(data: PricesCreateInput!): Price!

  """delete on cancellations"""
  deleteOneCancellations(where: CancellationsWhereUniqueInput!): Cancellation

  """delete one user"""
  deleteOneChildren(where: ChildrenWhereUniqueInput!): Child

  """delete one course"""
  deleteOneCourses(where: CoursesWhereUniqueInput!): Course

  """delete one option"""
  deleteOneOptions(where: OptionsWhereUniqueInput!): Option

  """delete on user"""
  deleteOneUsers(where: UsersWhereUniqueInput!): User
  forgotPassword(email: String!): MessagePayload!
  login(loginInput: loginInput): AuthPayload!
  resetPassword(resetPasswordInput: resetPasswordInput!): MessagePayload!

  """update on cancellation"""
  updateOneCancellations(data: CancellationsUpdateInput!, where: CancellationsWhereUniqueInput!): Cancellation

  """Update on child"""
  updateOneChildren(data: ChildrenUpdateInput!, where: ChildrenWhereUniqueInput!): Child

  """update one course"""
  updateOneCourses(data: CoursesUpdateInput!, where: CoursesWhereUniqueInput!): Course
  updateUser(updateUserInput: userUpdateInput!): User!
  verifyToken(token: verifyTokenInput!): tokenVerificationResponse!
}

enum NameEnum {
  INSSURANCE
  MEMBERSH1PFEE1
  MEMBERSHIPFEE2
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumNameEnumFilter {
  equals: NameEnum
  in: [NameEnum!]
  not: NestedEnumNameEnumFilter
  notIn: [NameEnum!]
}

input NestedEnumRoleEnumFilter {
  equals: RoleEnum
  in: [RoleEnum!]
  not: NestedEnumRoleEnumFilter
  notIn: [RoleEnum!]
}

input NestedEnumStatusEnumFilter {
  equals: StatusEnum
  in: [StatusEnum!]
  not: NestedEnumStatusEnumFilter
  notIn: [StatusEnum!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Option {
  created_at: Date!
  id: Int!
  name: String
  price: Price!
}

type OptionSet {
  cancelled_at: Date
  id: Int!
  option_id: Int!
  options: Option
  order_id: Int!
  paid_at: Date
  price: Price
  price_id: Int!
  status: StatusEnum!
}

input OptionsCreateInput {
  Prices: PricesCreateNestedManyWithoutOptionInput
  created_at: DateTime
  name: NameEnum!
  orders: Options_setCreateNestedManyWithoutOptionInput
}

input OptionsCreateNestedOneWithoutOrdersInput {
  connect: OptionsWhereUniqueInput
  connectOrCreate: OptionsCreateOrConnectWithoutOrdersInput
  create: OptionsCreateWithoutOrdersInput
}

input OptionsCreateNestedOneWithoutPricesInput {
  connect: OptionsWhereUniqueInput
  connectOrCreate: OptionsCreateOrConnectWithoutPricesInput
  create: OptionsCreateWithoutPricesInput
}

input OptionsCreateOrConnectWithoutOrdersInput {
  create: OptionsCreateWithoutOrdersInput!
  where: OptionsWhereUniqueInput!
}

input OptionsCreateOrConnectWithoutPricesInput {
  create: OptionsCreateWithoutPricesInput!
  where: OptionsWhereUniqueInput!
}

input OptionsCreateWithoutOrdersInput {
  Prices: PricesCreateNestedManyWithoutOptionInput
  created_at: DateTime
  name: NameEnum!
}

input OptionsCreateWithoutPricesInput {
  created_at: DateTime
  name: NameEnum!
  orders: Options_setCreateNestedManyWithoutOptionInput
}

input OptionsUpdateOneRequiredWithoutOrdersInput {
  connect: OptionsWhereUniqueInput
  connectOrCreate: OptionsCreateOrConnectWithoutOrdersInput
  create: OptionsCreateWithoutOrdersInput
  update: OptionsUpdateWithoutOrdersInput
  upsert: OptionsUpsertWithoutOrdersInput
}

input OptionsUpdateOneRequiredWithoutPricesInput {
  connect: OptionsWhereUniqueInput
  connectOrCreate: OptionsCreateOrConnectWithoutPricesInput
  create: OptionsCreateWithoutPricesInput
  update: OptionsUpdateWithoutPricesInput
  upsert: OptionsUpsertWithoutPricesInput
}

input OptionsUpdateWithoutOrdersInput {
  Prices: PricesUpdateManyWithoutOptionInput
  created_at: DateTimeFieldUpdateOperationsInput
  name: EnumNameEnumFieldUpdateOperationsInput
}

input OptionsUpdateWithoutPricesInput {
  created_at: DateTimeFieldUpdateOperationsInput
  name: EnumNameEnumFieldUpdateOperationsInput
  orders: Options_setUpdateManyWithoutOptionInput
}

input OptionsUpsertWithoutOrdersInput {
  create: OptionsCreateWithoutOrdersInput!
  update: OptionsUpdateWithoutOrdersInput!
}

input OptionsUpsertWithoutPricesInput {
  create: OptionsCreateWithoutPricesInput!
  update: OptionsUpdateWithoutPricesInput!
}

input OptionsWhereInput {
  AND: [OptionsWhereInput!]
  NOT: [OptionsWhereInput!]
  OR: [OptionsWhereInput!]
  Prices: PricesListRelationFilter
  created_at: DateTimeFilter
  id: IntFilter
  name: EnumNameEnumFilter
  orders: Options_setListRelationFilter
}

input OptionsWhereUniqueInput {
  id: Int
  name: NameEnum
}

input Options_setCreateInput {
  cancelled_at: DateTime
  option: OptionsCreateNestedOneWithoutOrdersInput!
  order: OrdersCreateNestedOneWithoutOptions_setInput!
  paid_at: DateTime
  price: PricesCreateNestedOneWithoutOptions_setInput!
  status: StatusEnum
}

input Options_setCreateManyOptionInput {
  cancelled_at: DateTime
  id: Int
  order_id: Int!
  paid_at: DateTime
  price_id: Int!
  status: StatusEnum
}

input Options_setCreateManyOptionInputEnvelope {
  data: [Options_setCreateManyOptionInput!]
  skipDuplicates: Boolean
}

input Options_setCreateManyOrderInput {
  cancelled_at: DateTime
  id: Int
  option_id: Int!
  paid_at: DateTime
  price_id: Int!
  status: StatusEnum
}

input Options_setCreateManyOrderInputEnvelope {
  data: [Options_setCreateManyOrderInput!]
  skipDuplicates: Boolean
}

input Options_setCreateManyPriceInput {
  cancelled_at: DateTime
  id: Int
  option_id: Int!
  order_id: Int!
  paid_at: DateTime
  status: StatusEnum
}

input Options_setCreateManyPriceInputEnvelope {
  data: [Options_setCreateManyPriceInput!]
  skipDuplicates: Boolean
}

input Options_setCreateNestedManyWithoutOptionInput {
  connect: [Options_setWhereUniqueInput!]
  connectOrCreate: [Options_setCreateOrConnectWithoutOptionInput!]
  create: [Options_setCreateWithoutOptionInput!]
  createMany: Options_setCreateManyOptionInputEnvelope
}

input Options_setCreateNestedManyWithoutOrderInput {
  connect: [Options_setWhereUniqueInput!]
  connectOrCreate: [Options_setCreateOrConnectWithoutOrderInput!]
  create: [Options_setCreateWithoutOrderInput!]
  createMany: Options_setCreateManyOrderInputEnvelope
}

input Options_setCreateNestedManyWithoutPriceInput {
  connect: [Options_setWhereUniqueInput!]
  connectOrCreate: [Options_setCreateOrConnectWithoutPriceInput!]
  create: [Options_setCreateWithoutPriceInput!]
  createMany: Options_setCreateManyPriceInputEnvelope
}

input Options_setCreateOrConnectWithoutOptionInput {
  create: Options_setCreateWithoutOptionInput!
  where: Options_setWhereUniqueInput!
}

input Options_setCreateOrConnectWithoutOrderInput {
  create: Options_setCreateWithoutOrderInput!
  where: Options_setWhereUniqueInput!
}

input Options_setCreateOrConnectWithoutPriceInput {
  create: Options_setCreateWithoutPriceInput!
  where: Options_setWhereUniqueInput!
}

input Options_setCreateWithoutOptionInput {
  cancelled_at: DateTime
  order: OrdersCreateNestedOneWithoutOptions_setInput!
  paid_at: DateTime
  price: PricesCreateNestedOneWithoutOptions_setInput!
  status: StatusEnum
}

input Options_setCreateWithoutOrderInput {
  cancelled_at: DateTime
  option: OptionsCreateNestedOneWithoutOrdersInput!
  paid_at: DateTime
  price: PricesCreateNestedOneWithoutOptions_setInput!
  status: StatusEnum
}

input Options_setCreateWithoutPriceInput {
  cancelled_at: DateTime
  option: OptionsCreateNestedOneWithoutOrdersInput!
  order: OrdersCreateNestedOneWithoutOptions_setInput!
  paid_at: DateTime
  status: StatusEnum
}

input Options_setListRelationFilter {
  every: Options_setWhereInput
  none: Options_setWhereInput
  some: Options_setWhereInput
}

input Options_setScalarWhereInput {
  AND: [Options_setScalarWhereInput!]
  NOT: [Options_setScalarWhereInput!]
  OR: [Options_setScalarWhereInput!]
  cancelled_at: DateTimeNullableFilter
  id: IntFilter
  option_id: IntFilter
  order_id: IntFilter
  paid_at: DateTimeNullableFilter
  price_id: IntFilter
  status: EnumStatusEnumFilter
}

input Options_setUpdateManyMutationInput {
  cancelled_at: NullableDateTimeFieldUpdateOperationsInput
  paid_at: NullableDateTimeFieldUpdateOperationsInput
  status: EnumStatusEnumFieldUpdateOperationsInput
}

input Options_setUpdateManyWithWhereWithoutOptionInput {
  data: Options_setUpdateManyMutationInput!
  where: Options_setScalarWhereInput!
}

input Options_setUpdateManyWithWhereWithoutOrderInput {
  data: Options_setUpdateManyMutationInput!
  where: Options_setScalarWhereInput!
}

input Options_setUpdateManyWithWhereWithoutPriceInput {
  data: Options_setUpdateManyMutationInput!
  where: Options_setScalarWhereInput!
}

input Options_setUpdateManyWithoutOptionInput {
  connect: [Options_setWhereUniqueInput!]
  connectOrCreate: [Options_setCreateOrConnectWithoutOptionInput!]
  create: [Options_setCreateWithoutOptionInput!]
  createMany: Options_setCreateManyOptionInputEnvelope
  delete: [Options_setWhereUniqueInput!]
  deleteMany: [Options_setScalarWhereInput!]
  disconnect: [Options_setWhereUniqueInput!]
  set: [Options_setWhereUniqueInput!]
  update: [Options_setUpdateWithWhereUniqueWithoutOptionInput!]
  updateMany: [Options_setUpdateManyWithWhereWithoutOptionInput!]
  upsert: [Options_setUpsertWithWhereUniqueWithoutOptionInput!]
}

input Options_setUpdateManyWithoutOrderInput {
  connect: [Options_setWhereUniqueInput!]
  connectOrCreate: [Options_setCreateOrConnectWithoutOrderInput!]
  create: [Options_setCreateWithoutOrderInput!]
  createMany: Options_setCreateManyOrderInputEnvelope
  delete: [Options_setWhereUniqueInput!]
  deleteMany: [Options_setScalarWhereInput!]
  disconnect: [Options_setWhereUniqueInput!]
  set: [Options_setWhereUniqueInput!]
  update: [Options_setUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [Options_setUpdateManyWithWhereWithoutOrderInput!]
  upsert: [Options_setUpsertWithWhereUniqueWithoutOrderInput!]
}

input Options_setUpdateManyWithoutPriceInput {
  connect: [Options_setWhereUniqueInput!]
  connectOrCreate: [Options_setCreateOrConnectWithoutPriceInput!]
  create: [Options_setCreateWithoutPriceInput!]
  createMany: Options_setCreateManyPriceInputEnvelope
  delete: [Options_setWhereUniqueInput!]
  deleteMany: [Options_setScalarWhereInput!]
  disconnect: [Options_setWhereUniqueInput!]
  set: [Options_setWhereUniqueInput!]
  update: [Options_setUpdateWithWhereUniqueWithoutPriceInput!]
  updateMany: [Options_setUpdateManyWithWhereWithoutPriceInput!]
  upsert: [Options_setUpsertWithWhereUniqueWithoutPriceInput!]
}

input Options_setUpdateWithWhereUniqueWithoutOptionInput {
  data: Options_setUpdateWithoutOptionInput!
  where: Options_setWhereUniqueInput!
}

input Options_setUpdateWithWhereUniqueWithoutOrderInput {
  data: Options_setUpdateWithoutOrderInput!
  where: Options_setWhereUniqueInput!
}

input Options_setUpdateWithWhereUniqueWithoutPriceInput {
  data: Options_setUpdateWithoutPriceInput!
  where: Options_setWhereUniqueInput!
}

input Options_setUpdateWithoutOptionInput {
  cancelled_at: NullableDateTimeFieldUpdateOperationsInput
  order: OrdersUpdateOneRequiredWithoutOptions_setInput
  paid_at: NullableDateTimeFieldUpdateOperationsInput
  price: PricesUpdateOneRequiredWithoutOptions_setInput
  status: EnumStatusEnumFieldUpdateOperationsInput
}

input Options_setUpdateWithoutOrderInput {
  cancelled_at: NullableDateTimeFieldUpdateOperationsInput
  option: OptionsUpdateOneRequiredWithoutOrdersInput
  paid_at: NullableDateTimeFieldUpdateOperationsInput
  price: PricesUpdateOneRequiredWithoutOptions_setInput
  status: EnumStatusEnumFieldUpdateOperationsInput
}

input Options_setUpdateWithoutPriceInput {
  cancelled_at: NullableDateTimeFieldUpdateOperationsInput
  option: OptionsUpdateOneRequiredWithoutOrdersInput
  order: OrdersUpdateOneRequiredWithoutOptions_setInput
  paid_at: NullableDateTimeFieldUpdateOperationsInput
  status: EnumStatusEnumFieldUpdateOperationsInput
}

input Options_setUpsertWithWhereUniqueWithoutOptionInput {
  create: Options_setCreateWithoutOptionInput!
  update: Options_setUpdateWithoutOptionInput!
  where: Options_setWhereUniqueInput!
}

input Options_setUpsertWithWhereUniqueWithoutOrderInput {
  create: Options_setCreateWithoutOrderInput!
  update: Options_setUpdateWithoutOrderInput!
  where: Options_setWhereUniqueInput!
}

input Options_setUpsertWithWhereUniqueWithoutPriceInput {
  create: Options_setCreateWithoutPriceInput!
  update: Options_setUpdateWithoutPriceInput!
  where: Options_setWhereUniqueInput!
}

input Options_setWhereInput {
  AND: [Options_setWhereInput!]
  NOT: [Options_setWhereInput!]
  OR: [Options_setWhereInput!]
  cancelled_at: DateTimeNullableFilter
  id: IntFilter
  option: OptionsWhereInput
  option_id: IntFilter
  order: OrdersWhereInput
  order_id: IntFilter
  paid_at: DateTimeNullableFilter
  price: PricesWhereInput
  price_id: IntFilter
  status: EnumStatusEnumFilter
}

input Options_setWhereUniqueInput {
  id: Int
}

type Order {
  cancelled_at: Date
  child: Child
  child_id: Int!
  created_at: Date!
  id: Int!
  option_set: [OptionSet]
  sport_voucher: Boolean!
}

input OrdersCreateInput {
  cancelled_at: DateTime
  child: ChildrenCreateNestedOneWithoutOrdersInput!
  created_at: DateTime
  options_set: Options_setCreateNestedManyWithoutOrderInput
  sport_voucher: Boolean
}

input OrdersCreateManyChildInput {
  cancelled_at: DateTime
  created_at: DateTime
  id: Int
  sport_voucher: Boolean
}

input OrdersCreateManyChildInputEnvelope {
  data: [OrdersCreateManyChildInput!]
  skipDuplicates: Boolean
}

input OrdersCreateNestedManyWithoutChildInput {
  connect: [OrdersWhereUniqueInput!]
  connectOrCreate: [OrdersCreateOrConnectWithoutChildInput!]
  create: [OrdersCreateWithoutChildInput!]
  createMany: OrdersCreateManyChildInputEnvelope
}

input OrdersCreateNestedOneWithoutOptions_setInput {
  connect: OrdersWhereUniqueInput
  connectOrCreate: OrdersCreateOrConnectWithoutOptions_setInput
  create: OrdersCreateWithoutOptions_setInput
}

input OrdersCreateOrConnectWithoutChildInput {
  create: OrdersCreateWithoutChildInput!
  where: OrdersWhereUniqueInput!
}

input OrdersCreateOrConnectWithoutOptions_setInput {
  create: OrdersCreateWithoutOptions_setInput!
  where: OrdersWhereUniqueInput!
}

input OrdersCreateWithoutChildInput {
  cancelled_at: DateTime
  created_at: DateTime
  options_set: Options_setCreateNestedManyWithoutOrderInput
  sport_voucher: Boolean
}

input OrdersCreateWithoutOptions_setInput {
  cancelled_at: DateTime
  child: ChildrenCreateNestedOneWithoutOrdersInput!
  created_at: DateTime
  sport_voucher: Boolean
}

input OrdersListRelationFilter {
  every: OrdersWhereInput
  none: OrdersWhereInput
  some: OrdersWhereInput
}

input OrdersScalarWhereInput {
  AND: [OrdersScalarWhereInput!]
  NOT: [OrdersScalarWhereInput!]
  OR: [OrdersScalarWhereInput!]
  cancelled_at: DateTimeNullableFilter
  child_id: IntFilter
  created_at: DateTimeFilter
  id: IntFilter
  sport_voucher: BoolFilter
}

input OrdersUpdateManyMutationInput {
  cancelled_at: NullableDateTimeFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  sport_voucher: BoolFieldUpdateOperationsInput
}

input OrdersUpdateManyWithWhereWithoutChildInput {
  data: OrdersUpdateManyMutationInput!
  where: OrdersScalarWhereInput!
}

input OrdersUpdateManyWithoutChildInput {
  connect: [OrdersWhereUniqueInput!]
  connectOrCreate: [OrdersCreateOrConnectWithoutChildInput!]
  create: [OrdersCreateWithoutChildInput!]
  createMany: OrdersCreateManyChildInputEnvelope
  delete: [OrdersWhereUniqueInput!]
  deleteMany: [OrdersScalarWhereInput!]
  disconnect: [OrdersWhereUniqueInput!]
  set: [OrdersWhereUniqueInput!]
  update: [OrdersUpdateWithWhereUniqueWithoutChildInput!]
  updateMany: [OrdersUpdateManyWithWhereWithoutChildInput!]
  upsert: [OrdersUpsertWithWhereUniqueWithoutChildInput!]
}

input OrdersUpdateOneRequiredWithoutOptions_setInput {
  connect: OrdersWhereUniqueInput
  connectOrCreate: OrdersCreateOrConnectWithoutOptions_setInput
  create: OrdersCreateWithoutOptions_setInput
  update: OrdersUpdateWithoutOptions_setInput
  upsert: OrdersUpsertWithoutOptions_setInput
}

input OrdersUpdateWithWhereUniqueWithoutChildInput {
  data: OrdersUpdateWithoutChildInput!
  where: OrdersWhereUniqueInput!
}

input OrdersUpdateWithoutChildInput {
  cancelled_at: NullableDateTimeFieldUpdateOperationsInput
  created_at: DateTimeFieldUpdateOperationsInput
  options_set: Options_setUpdateManyWithoutOrderInput
  sport_voucher: BoolFieldUpdateOperationsInput
}

input OrdersUpdateWithoutOptions_setInput {
  cancelled_at: NullableDateTimeFieldUpdateOperationsInput
  child: ChildrenUpdateOneRequiredWithoutOrdersInput
  created_at: DateTimeFieldUpdateOperationsInput
  sport_voucher: BoolFieldUpdateOperationsInput
}

input OrdersUpsertWithWhereUniqueWithoutChildInput {
  create: OrdersCreateWithoutChildInput!
  update: OrdersUpdateWithoutChildInput!
  where: OrdersWhereUniqueInput!
}

input OrdersUpsertWithoutOptions_setInput {
  create: OrdersCreateWithoutOptions_setInput!
  update: OrdersUpdateWithoutOptions_setInput!
}

input OrdersWhereInput {
  AND: [OrdersWhereInput!]
  NOT: [OrdersWhereInput!]
  OR: [OrdersWhereInput!]
  cancelled_at: DateTimeNullableFilter
  child: ChildrenWhereInput
  child_id: IntFilter
  created_at: DateTimeFilter
  id: IntFilter
  options_set: Options_setListRelationFilter
  sport_voucher: BoolFilter
}

input OrdersWhereUniqueInput {
  id: Int
}

type Price {
  created_at: Date!
  id: Int!
  option: Option!
  option_id: Int!
  price: Int!
}

input PricesCreateInput {
  created_at: DateTime
  option: OptionsCreateNestedOneWithoutPricesInput!
  options_set: Options_setCreateNestedManyWithoutPriceInput
  price: Int!
}

input PricesCreateManyOptionInput {
  created_at: DateTime
  id: Int
  price: Int!
}

input PricesCreateManyOptionInputEnvelope {
  data: [PricesCreateManyOptionInput!]
  skipDuplicates: Boolean
}

input PricesCreateNestedManyWithoutOptionInput {
  connect: [PricesWhereUniqueInput!]
  connectOrCreate: [PricesCreateOrConnectWithoutOptionInput!]
  create: [PricesCreateWithoutOptionInput!]
  createMany: PricesCreateManyOptionInputEnvelope
}

input PricesCreateNestedOneWithoutOptions_setInput {
  connect: PricesWhereUniqueInput
  connectOrCreate: PricesCreateOrConnectWithoutOptions_setInput
  create: PricesCreateWithoutOptions_setInput
}

input PricesCreateOrConnectWithoutOptionInput {
  create: PricesCreateWithoutOptionInput!
  where: PricesWhereUniqueInput!
}

input PricesCreateOrConnectWithoutOptions_setInput {
  create: PricesCreateWithoutOptions_setInput!
  where: PricesWhereUniqueInput!
}

input PricesCreateWithoutOptionInput {
  created_at: DateTime
  options_set: Options_setCreateNestedManyWithoutPriceInput
  price: Int!
}

input PricesCreateWithoutOptions_setInput {
  created_at: DateTime
  option: OptionsCreateNestedOneWithoutPricesInput!
  price: Int!
}

input PricesListRelationFilter {
  every: PricesWhereInput
  none: PricesWhereInput
  some: PricesWhereInput
}

input PricesOrderByInput {
  created_at: SortOrder
  id: SortOrder
  option_id: SortOrder
  price: SortOrder
}

input PricesScalarWhereInput {
  AND: [PricesScalarWhereInput!]
  NOT: [PricesScalarWhereInput!]
  OR: [PricesScalarWhereInput!]
  created_at: DateTimeFilter
  id: IntFilter
  option_id: IntFilter
  price: IntFilter
}

input PricesUpdateManyMutationInput {
  created_at: DateTimeFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
}

input PricesUpdateManyWithWhereWithoutOptionInput {
  data: PricesUpdateManyMutationInput!
  where: PricesScalarWhereInput!
}

input PricesUpdateManyWithoutOptionInput {
  connect: [PricesWhereUniqueInput!]
  connectOrCreate: [PricesCreateOrConnectWithoutOptionInput!]
  create: [PricesCreateWithoutOptionInput!]
  createMany: PricesCreateManyOptionInputEnvelope
  delete: [PricesWhereUniqueInput!]
  deleteMany: [PricesScalarWhereInput!]
  disconnect: [PricesWhereUniqueInput!]
  set: [PricesWhereUniqueInput!]
  update: [PricesUpdateWithWhereUniqueWithoutOptionInput!]
  updateMany: [PricesUpdateManyWithWhereWithoutOptionInput!]
  upsert: [PricesUpsertWithWhereUniqueWithoutOptionInput!]
}

input PricesUpdateOneRequiredWithoutOptions_setInput {
  connect: PricesWhereUniqueInput
  connectOrCreate: PricesCreateOrConnectWithoutOptions_setInput
  create: PricesCreateWithoutOptions_setInput
  update: PricesUpdateWithoutOptions_setInput
  upsert: PricesUpsertWithoutOptions_setInput
}

input PricesUpdateWithWhereUniqueWithoutOptionInput {
  data: PricesUpdateWithoutOptionInput!
  where: PricesWhereUniqueInput!
}

input PricesUpdateWithoutOptionInput {
  created_at: DateTimeFieldUpdateOperationsInput
  options_set: Options_setUpdateManyWithoutPriceInput
  price: IntFieldUpdateOperationsInput
}

input PricesUpdateWithoutOptions_setInput {
  created_at: DateTimeFieldUpdateOperationsInput
  option: OptionsUpdateOneRequiredWithoutPricesInput
  price: IntFieldUpdateOperationsInput
}

input PricesUpsertWithWhereUniqueWithoutOptionInput {
  create: PricesCreateWithoutOptionInput!
  update: PricesUpdateWithoutOptionInput!
  where: PricesWhereUniqueInput!
}

input PricesUpsertWithoutOptions_setInput {
  create: PricesCreateWithoutOptions_setInput!
  update: PricesUpdateWithoutOptions_setInput!
}

input PricesWhereInput {
  AND: [PricesWhereInput!]
  NOT: [PricesWhereInput!]
  OR: [PricesWhereInput!]
  created_at: DateTimeFilter
  id: IntFilter
  option: OptionsWhereInput
  option_id: IntFilter
  options_set: Options_setListRelationFilter
  price: IntFilter
}

input PricesWhereUniqueInput {
  id: Int
}

type Query {
  """get cancellations"""
  cancellations(after: CancellationsWhereUniqueInput, before: CancellationsWhereUniqueInput, first: Int, last: Int, orderBy: [CancellationsOrderByInput!], where: CancellationsWhereInput): [Cancellation!]!
  children(after: ChildrenWhereUniqueInput, before: ChildrenWhereUniqueInput, first: Int, last: Int): [Child!]!
  courses(after: CoursesWhereUniqueInput, before: CoursesWhereUniqueInput, first: Int, last: Int, orderBy: [CoursesOrderByInput!], where: CoursesWhereInput): [Course!]!
  currentUser: User!

  """get options"""
  options(after: OptionsWhereUniqueInput, before: OptionsWhereUniqueInput, first: Int, last: Int, where: OptionsWhereInput): [Option!]!
  prices(after: PricesWhereUniqueInput, before: PricesWhereUniqueInput, first: Int, last: Int, orderBy: [PricesOrderByInput!], where: PricesWhereInput): [Price!]!
  users(after: UsersWhereUniqueInput, before: UsersWhereUniqueInput, first: Int, last: Int, orderBy: [UsersOrderByInput!], where: UsersWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum RoleEnum {
  ADMIN
  MONITOR
  USER
}

enum SortOrder {
  asc
  desc
}

enum StatusEnum {
  NOTAPPLICABLE
  NOTYETPAYABLE
  PAID
  UNPAID
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Token {
  token: String!
  userId: String!
}

type User {
  children: [Child]
  created_at: Date!
  email: String!
  first_name: String!
  id: String!
  name: String!
  password: String!
  phone_number: String!
  secondary_email: String
  vertified_at: Date
}

input UsersCreateNestedOneWithoutChildrenInput {
  connect: UsersWhereUniqueInput
  connectOrCreate: UsersCreateOrConnectWithoutChildrenInput
  create: UsersCreateWithoutChildrenInput
}

input UsersCreateOrConnectWithoutChildrenInput {
  create: UsersCreateWithoutChildrenInput!
  where: UsersWhereUniqueInput!
}

input UsersCreateWithoutChildrenInput {
  created_at: DateTime
  deleted_at: DateTime
  email: String!
  first_name: String!
  id: String
  name: String!
  password: String!
  phone_number: String!
  resetPasswordToken: String
  role: RoleEnum
  secondary_email: String
  verfifed_at: DateTime
}

input UsersOrderByInput {
  created_at: SortOrder
  deleted_at: SortOrder
  email: SortOrder
  first_name: SortOrder
  id: SortOrder
  name: SortOrder
  password: SortOrder
  phone_number: SortOrder
  resetPasswordToken: SortOrder
  role: SortOrder
  secondary_email: SortOrder
  verfifed_at: SortOrder
}

input UsersUpdateOneRequiredWithoutChildrenInput {
  connect: UsersWhereUniqueInput
  connectOrCreate: UsersCreateOrConnectWithoutChildrenInput
  create: UsersCreateWithoutChildrenInput
  update: UsersUpdateWithoutChildrenInput
  upsert: UsersUpsertWithoutChildrenInput
}

input UsersUpdateWithoutChildrenInput {
  created_at: DateTimeFieldUpdateOperationsInput
  deleted_at: NullableDateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  first_name: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  phone_number: StringFieldUpdateOperationsInput
  resetPasswordToken: NullableStringFieldUpdateOperationsInput
  role: EnumRoleEnumFieldUpdateOperationsInput
  secondary_email: NullableStringFieldUpdateOperationsInput
  verfifed_at: NullableDateTimeFieldUpdateOperationsInput
}

input UsersUpsertWithoutChildrenInput {
  create: UsersCreateWithoutChildrenInput!
  update: UsersUpdateWithoutChildrenInput!
}

input UsersWhereInput {
  AND: [UsersWhereInput!]
  NOT: [UsersWhereInput!]
  OR: [UsersWhereInput!]
  children: ChildrenListRelationFilter
  created_at: DateTimeFilter
  deleted_at: DateTimeNullableFilter
  email: StringFilter
  first_name: StringFilter
  id: StringFilter
  name: StringFilter
  password: StringFilter
  phone_number: StringFilter
  resetPasswordToken: StringNullableFilter
  role: EnumRoleEnumFilter
  secondary_email: StringNullableFilter
  verfifed_at: DateTimeNullableFilter
}

input UsersWhereUniqueInput {
  email: String
  id: String
  resetPasswordToken: String
}

input loginInput {
  email: String!
  password: String!
}

input resetPasswordInput {
  newPassword: String!
  resetPasswordToken: String!
}

input signupInput {
  children: [ChildrenCreateInput]!
  email: String!
  first_name: String!
  name: String!
  password: String!
  phone_number: String!
}

type tokenVerificationResponse {
  response: Boolean!
  userEmail: String!
}

input userUniqueInput {
  email: String
  id: ID
}

input userUpdateInput {
  email: String
  password: String
  resetPasswordToken: String
}

input verifyTokenInput {
  token: String!
}
